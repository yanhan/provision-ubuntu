- name: Add git ppa
  include: ../../../playbook-includes/add-ppa.yml
           name=git
           keyserver=keyserver.ubuntu.com
           key_fingerprint=E1DD270288B4E6030699E45FA1715D88E1DF1F24
           deb_ppa="http://ppa.launchpad.net/git-core/ppa/ubuntu"
           deb_src_ppa="http://ppa.launchpad.net/git-core/ppa/ubuntu"

- name: Add R ppa
  include: ../../../playbook-includes/add-ppa.yml
           name=R
           keyserver=keyserver.ubuntu.com
           key_fingerprint="C9A7585B49D51698710F3A115E25F516B04C661B"
           deb_ppa="http://ppa.launchpad.net/marutter/rrutter/ubuntu"
           deb_src_ppa="http://ppa.launchpad.net/marutter/rrutter/ubuntu"

#- name: Add ffmpeg ppa
#  include: ../../../playbook-includes/add-ppa.yml
#           name=ffmpeg
#           keyserver=keyserver.ubuntu.com
#           key_fingerprint=8E51A6D660CD88D67D65221D90BD7EACED8E640A
#           deb_ppa=http://ppa.launchpad.net/mc3man/trusty-media/ubuntu
#           deb_src_ppa=http://ppa.launchpad.net/mc3man/trusty-media/ubuntu

- name: check {{ apt_sources_list }} to see if sg mirror is used
  shell: "cat {{ apt_sources_list }} | perl -ne 'print if /^(deb|deb-src) http:\\/\\/sg.archive.ubuntu.com/' | wc -l"
  register: nr_lines_with_sg_mirror_in_apt_sources

- name: replace {{ apt_sg_mirror }} mirrors with {{ apt_osuosl_mirror }} mirror
  shell: perl -pi -e 's#^(deb|deb-src) {{ apt_sg_mirror }}#\1 {{ apt_osuosl_mirror }}#' /etc/apt/sources.list
  when: nr_lines_with_sg_mirror_in_apt_sources.stdout | int > 0

- name: Check if we need to perform apt-get update (if last update was > 1 day ago OR if we just replaced apt sg mirror)
  check_if_need_to_apt_get_update: cache_valid_time=86400
                                   nr_lines_with_sg_mirror_in_apt_sources={{ nr_lines_with_sg_mirror_in_apt_sources.stdout }}
  register: ag_update
  sudo: yes

- name: apt-get update
  apt: update_cache="yes"
  when: ag_update.need_to_update
  sudo: yes

- name: install some packages
  apt: name={{ item }}
       state=present
  with_items:
    - chromium-browser
    - curl
    # get metadata of image files
    - exiftool
    - expat
    - ffmpeg
    - firefox
    - flashplugin-installer
    - g++
    - gcc
    - gdb
    - gimp
    - git
    - gstreamer0.10-ffmpeg
    - htop
    - icedtea-plugin
    - imagemagick
    - libbz2-dev
    - libcurl4-openssl-dev
    - libexpat1-dev
    # Required for R's `rgl` package, which is a dependency for the
    # `igraph` package
    - libgl1-mesa-dev
    - libglu1-mesa-dev
    - libgmp-dev
    - liblzma-dev
    - libncurses5-dev
    - libpcre3
    - libpcre3-dev
    # Required for R's `Rpoppler` package
    - libpoppler-glib-dev
    - libsqlite3-dev
    - libssl-dev
    # Required for R's `XML` package
    # Based on: http://stackoverflow.com/a/7765470
    - libxml2-dev
    - lzma-dev
    - make
    - octave
    - openjdk-7-jdk
    - pepperflashplugin-nonfree
    - pwgen
    - pv
    - r-base
    - r-base-core
    - screen
    - scrot
    - sqlite3
    - tcl8.6
    - tcl8.6-dev
    - tk8.6
    - tk8.6-dev
    - tmux
    - unzip
    - vim
    - virtualbox
    - virtualbox-guest-additions-iso
    - virtualbox-guest-utils
    - virtualbox-guest-x11
    - xsel
    - zlib1g-dev
    - zsh
  sudo: yes

- name: Ensure that flashplugin-installer is always at the latest version
  apt: name=flashplugin-installer
       state=latest
  sudo: yes

- name: Install build dependencies for matplotlib
  shell: apt-get -y build-dep matplotlib
  sudo: yes

- include: install-dotfiles.yml

- name: check if dropbox is installed
  shell: test -f ~/.dropbox-dist/dropboxd
  ignore_errors: true
  register: dropbox_installed

- name: install dropbox
  shell: cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
  when: dropbox_installed.rc != 0

- name: check if vagrant is installed
  shell: dpkg-query -W -f'${Status}\n' vagrant | grep '^install'
  ignore_errors: true
  register: vagrant_installed

- name: install vagrant 1.7.2
  shell: wget 'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2_x86_64.deb' -O /tmp/vagrant_1.7.2_x86_64.deb && sudo dpkg -i /tmp/vagrant_1.7.2_x86_64.deb
  when: vagrant_installed.rc != 0

- include: install-haskell-platform.yml

# NOTE: This part should always be placed at the end of this file because there
#       is a high chance of it failing due to network connection issues
# Installs TexLive.
- include: install-texlive.yml
