- name: import GPG key for ffmpeg ppa
  apt_key: keyserver=keyserver.ubuntu.com
           id=8E51A6D660CD88D67D65221D90BD7EACED8E640A
           state=present

- name: add ffmpeg ppa for installing ffmpeg
  apt_repository: repo='deb http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main'
                  state=present
                  update_cache=yes

- name: add ffmpeg source ppa for installing ffmpeg
  apt_repository: repo='deb-src http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main'
                  state=present
                  update_cache=yes

- name: check {{ apt_sources_list }} to see if sg mirror is used
  shell: "cat {{ apt_sources_list }} | perl -ne 'print if /^(deb|deb-src) http:\\/\\/sg.archive.ubuntu.com/' | wc -l"
  register: nr_lines_with_sg_mirror_in_apt_sources

- name: replace {{ apt_sg_mirror }} mirrors with {{ apt_osuosl_mirror }} mirror
  shell: perl -pi -e 's#^(deb|deb-src) {{ apt_sg_mirror }}#\1 {{ apt_osuosl_mirror }}#' /etc/apt/sources.list
  when: nr_lines_with_sg_mirror_in_apt_sources.stdout | int > 0

- name: Perform apt-get update if last update was > 1 day ago OR if we just replaced apt sg mirror
  mylib_perform_apt_update: cache_valid_time=86400
                            nr_lines_with_sg_mirror_in_apt_sources={{ nr_lines_with_sg_mirror_in_apt_sources.stdout }}
  sudo: yes

- name: install some packages
  apt: name={{ item }}
       state=present
  with_items:
    - chromium-browser
    - curl
    - expat
    - ffmpeg
    - firefox
    - flashplugin-installer
    - g++
    - gcc
    - gdb
    - gimp
    - git
    - gstreamer0.10-ffmpeg
    - icedtea-plugin
    - imagemagick
    - libbz2-dev
    - libcurl4-openssl-dev
    - libexpat1-dev
    - libgmp-dev
    - liblzma-dev
    - libncurses5-dev
    - libpcre3
    - libpcre3-dev
    - libsqlite3-dev
    - libssl-dev
    - lzma-dev
    - make
    - openjdk-7-jdk
    - pepperflashplugin-nonfree
    - pwgen
    - r-base
    - r-base-core
    - screen
    - scrot
    - sqlite3
    - tcl8.6
    - tcl8.6-dev
    - tk8.6
    - tk8.6-dev
    - tmux
    - unzip
    - vim
    - virtualbox
    - virtualbox-guest-additions-iso
    - virtualbox-guest-utils
    - virtualbox-guest-x11
    - xsel
    - zlib1g-dev
    - zsh

- include: install_dotfiles.yml

- name: check if dropbox is installed
  shell: test -f ~/.dropbox-dist/dropboxd
  ignore_errors: true
  register: dropbox_installed

- name: install dropbox
  shell: cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
  when: dropbox_installed.rc != 0

- name: check if vagrant is installed
  shell: dpkg-query -W -f'${Status}\n' vagrant | grep '^install'
  ignore_errors: true
  register: vagrant_installed

- name: install vagrant 1.7.2
  shell: wget 'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2_x86_64.deb' -O /tmp/vagrant_1.7.2_x86_64.deb && sudo dpkg -i /tmp/vagrant_1.7.2_x86_64.deb
  when: vagrant_installed.rc != 0

- include: install-haskell-platform.yml

- name: check if Golang has been installed
  shell: command -v go >/dev/null 2>&1
  register: go_installed
  ignore_errors: True

- include: install-golang.yml
  when: go_installed.rc != 0

- name: Install build dependencies for matplotlib
  shell: apt-get -y build-dep matplotlib
  sudo: True

# NOTE: This part should always be placed at the end of this file because there
#       is a high chance of it failing due to network connection issues
# Installs TexLive.
- include: install-texlive.yml
