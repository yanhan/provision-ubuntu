#!/bin/bash

set -x
set -e

early_abort=false
retcode=0

sudo apt-get install -y \
  gcc \
  git \
  libbz2-dev \
  libffi-dev \
  libreadline-dev \
  libsqlite3-dev \
  libssl-dev \
  make \
  python-dev \
  zlib1g-dev

if ! command -v pyenv >/dev/null 2>&1; then
  git clone git://github.com/pyenv/pyenv ~/.pyenv
  echo 'export PYENV_ROOT="${HOME}/.pyenv"' >> ~/.bashrc
  echo 'export PATH="${PYENV_ROOT}/bin:${PATH}"' >> ~/.bashrc
  echo -e 'if command -v pyenv >/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bashrc
  early_abort=true

  pyenv_venv_dir="$(pyenv root)/plugins/pyenv-virtualenv"
  if ! test -d "${pyenv_venv_dir}"; then
    git clone git://github.com/pyenv/pyenv-virtualenv "${pyenv_venv_dir}"
    echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
  fi
fi

if [ "${early_abort}" == "true" ]; then
  printf "Please run 'exec \${SHELL}', then run this program again. Exiting.\n"
  exit 0
fi

set +e
grep -q '3.7.4' <<< "$(pyenv versions)"
retcode=${?}
set -e
if [ "${retcode}" -ne 0 ]; then
  pyenv install 3.7.4
fi

set +e
grep -q 'provision-ubuntu' <<< "$(pyenv versions)"
retcode=${?}
set -e
if [ "${retcode}" -ne 0 ]; then
  pyenv virtualenv 3.7.4 provision-ubuntu
fi

eval "$(pyenv init -)"
pyenv activate provision-ubuntu

pip install -r requirements.txt
ansible-playbook -v -K -i inventory localhost.yml
pyenv deactivate
