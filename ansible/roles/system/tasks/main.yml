- name: import GPG key for ffmpeg ppa
  apt_key: keyserver=keyserver.ubuntu.com id=8E51A6D660CD88D67D65221D90BD7EACED8E640A state=present

- name: add ffmpeg ppa for installing ffmpeg
  apt_repository: repo='deb http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main' state=present update_cache=yes

- name: add ffmpeg source ppa for installing ffmpeg
  apt_repository: repo='deb-src http://ppa.launchpad.net/mc3man/trusty-media/ubuntu trusty main' state=present update_cache=yes

- name: apt-get update if last update was > 1 day ago
  apt: update_cache=yes cache_valid_time=86400

- name: install vim
  apt: name=vim state=present

- name: install screen
  apt: name=screen state=present

- name: install tmux
  apt: name=tmux state=present

- name: install zsh
  apt: name=zsh state=present

- name: install gcc
  apt: name=gcc state=present

- name: install g++
  apt: name=g++ state=present

- name: install make
  apt: name=make state=present

- name: install openjdk-7-jdk
  apt: name=openjdk-7-jdk state=present

- name: install gdb
  apt: name=gdb state=present

- name: install curl
  apt: name=curl state=present

- name: install expat
  apt: name=expat state=present

- name: install tcl8.6
  apt: name=tcl8.6 state=present

- name: install tcl8.6-dev
  apt: name=tcl8.6-dev state=present

- name: install tk8.6
  apt: name=tk8.6 state=present

- name: install tk8.6-dev
  apt: name=tk8.6-dev state=present

- name: install zlib1g-dev
  apt: name=zlib1g-dev state=present

- name: install lzma-dev
  apt: name=lzma-dev state=present

- name: install liblzma-dev
  apt: name=liblzma-dev state=present

- name: install libcurl4-openssl-dev
  apt: name=libcurl4-openssl-dev state=present

- name: install libssl-dev
  apt: name=libssl-dev state=present

- name: install libbz2-dev
  apt: name=libbz2-dev state=present

- name: install libexpat1-dev
  apt: name=libexpat1-dev state=present

- name: install libsqlite3-dev
  apt: name=libsqlite3-dev state=present

- name: install libncurses5-dev
  apt: name=libncurses5-dev state=present

- name: install libpcre3
  apt: name=libpcre3 state=present

- name: install libpcre3-dev
  apt: name=libpcre3-dev state=present

- name: install unzip
  apt: name=unzip state=present

- name: install xsel
  apt: name=xsel state=present

- name: install git
  apt: name=git state=present

- name: install sqlite3
  apt: name=sqlite3 state=present

- name: install r-base
  apt: name=r-base state=present

- name: install r-base-core
  apt: name=r-base-core state=present

- name: install pwgen
  apt: name=pwgen state=present

- name: install chromium-browser
  apt: name=chromium-browser state=present

- include: install_dotfiles.yml

- name: check if dropbox is installed
  shell: test -f ~/.dropbox-dist/dropboxd
  ignore_errors: true
  register: dropbox_installed
  sudo_user: philip

- name: install dropbox
  shell: cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
  when: dropbox_installed.rc != 0
  sudo_user: philip

- name: install scrot
  apt: name=scrot state=present

- name: install gimp
  apt: name=gimp state=present

- name: install virtualbox
  apt: name=virtualbox state=present

- name: install virtualbox-guest-additions-iso
  apt: name=virtualbox-guest-additions-iso state=present

- name: install virtualbox-guest-utils
  apt: name=virtualbox-guest-utils state=present

- name: install virtualbox-guest-x11
  apt: name=virtualbox-guest-x11 state=present

- name: check if vagrant is installed
  shell: sudo dpkg-query -W -f'${Status}\n' vagrant | grep '^install'
  ignore_errors: true
  register: vagrant_installed

- name: install vagrant 1.7.2
  shell: wget 'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2_x86_64.deb' -O /tmp/vagrant_1.7.2_x86_64.deb && sudo dpkg -i /tmp/vagrant_1.7.2_x86_64.deb
  when: vagrant_installed.rc != 0

- name: install ffmpeg
  apt: name=ffmpeg state=present

- name: install gstreamer0.10-ffmpeg
  apt: name=gstreamer0.10-ffmpeg state=present

- name: install flashplugin-installer
  apt: name=flashplugin-installer state=present

- name: install pepperflashplugin-nonfree
  apt: name=pepperflashplugin-nonfree state=present

# we do this because we're gonna install TeXLive manually
- name: remove tex-common
  apt: name=tex-common state=absent

- name: remove Chinese fonts installation log file
  shell: "rm -f {{ rsync_fonts_log_file_path }}"

- name: install Chinese fonts
  shell: "rsync -avz {{ fonts_folder }} {{ home_fonts_path }} --log-file={{ rsync_fonts_log_file_path }} --log-file-format='%f'"

- name: check if any new fonts are installed
  shell: "grep -q '\\.ttf$' {{ rsync_fonts_log_file_path }}"
  ignore_errors: true
  register: new_fonts_installed

- name: run `fc-cache -rv` when new fonts are installed
  shell: fc-cache -rv
  when: new_fonts_installed.rc == 0


# Install TeXLive

# Based on:
# http://tex.stackexchange.com/questions/1092/how-to-install-vanilla-texlive-on-debian-or-ubuntu/95373#95373

# for texlive-local fake package
- name: install equivs
  apt: name=equivs state=present install_recommends=no

- name: check if TeXLive is installed
  shell: dpkg -s texlive-local
  ignore_errors: True
  register: texlive_installed

- name: run TeXLive uninstall script for cleanup (when TeXLive isn't installed)
  shell: "{{ texlive_uninstall_script_path }}"
  ignore_errors: True

- name: copy TeXLive installer to /tmp
  shell: "cp {{ texlive_unix_installer_gz_path }} /tmp"
  when: texlive_installed.rc != 0

- name: install TeXLive
  shell: "{{ texlive_install_script_path }}"
  when: texlive_installed.rc != 0

- name: prepend TeXLive bin path to PATH env var in /etc/environment
  shell: "{{ texlive_update_etc_environment_script_path }}"
  when: texlive_installed.rc != 0

- name: install fake TeXLive package
  shell: "cp {{ texlive_equivs_file_path }} /tmp/tl-equivs/texlive-local && cd /tmp/tl-equivs && equivs-build texlive-local && dpkg -i texlive-local_2014-1_all.deb"
  when: texlive_installed.rc != 0
